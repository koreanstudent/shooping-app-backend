buildscript{
	ext {
			springBootVersion = '2.3.0.RELEASE'
			mooworkVersion = '2.2.4'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
				url "https://plugins.gradle.org/m2/"
		}
	}
		
	dependencies {
      classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
      classpath("com.github.node-gradle:gradle-node-plugin:${mooworkVersion}")
   }

}


plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
		// querydsl 추가
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'java'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'
apply plugin: 'application'


group = 'start.portfolio'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.querydsl:querydsl-jpa' 	// querydsl 추가
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8' //쿼리 파라미터 로그남기기 외부 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-security' // 스프링 시큐리티
	compile("org.springframework.boot:spring-boot-devtools") // 자동 리로딩
	compile 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1'
   	compile 'com.fasterxml.jackson.core:jackson-core:2.11.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}


// querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
// querydsl 추가 끝



def webappDir = "$projectDir/frontend"

node {
   version = '12.6.0'
   download=true
   workDir = file("${project.buildDir}/nodejs")
   npmWorkDir=file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
   workingDir = file("${project.projectDir}/frontend")
   args = ["install"]
}

task yarnBuild(type: YarnTask) {
   workingDir = file("${project.projectDir}/frontend")
   args = ['build']
}

task copyWebApp(type: Copy) {
   from "frontend/build"
   into 'build/resources/main/static/.'
}

yarnBuild.dependsOn appNpmInstall
copyWebApp.dependsOn yarnBuild
compileJava.dependsOn copyWebApp




